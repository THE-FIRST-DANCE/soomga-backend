generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output = "soomga-erd.svg"
}

model Member {
  id         Int           @id @default(autoincrement())
  email      String?       @unique
  nickname   String
  password   String
  avatar     String?
  birthdate  DateTime?     @default(now())
  gender     Gender?
  status     MemberStatus? @default(ACTIVE)
  role       Role?         @default(USER)
  provider   Provider?     @default(LOCAL)
  providerId String?
  pushToken  String?
  createdAt  DateTime?     @default(now())
  updatedAt  DateTime?     @updatedAt
  deletedAt  DateTime?

  tags         MemberTag[]
  languages    MemberLanguage[]
  boards       Board[]
  comments     Comment[]
  boardLikes   BoardLike[]
  plans        Plan[]
  schedules    MemberEvent[]
  chatrooms    ChatroomParticipants[]
  messages     ChatroomMessage[]
  guideReviews GuideReview[]

  guideProfile GuideProfile?
}

model GuideProfile {
  id                  Int         @id
  temperature         Float?      @default(36.5)
  service             String?
  areas               GuideArea[]
  phoneNumber         String?     @unique
  verifiedAt          DateTime?
  verifiedID          Boolean?    @default(false)
  verifiedBankAccount Boolean?    @default(false)

  member                 Member                       @relation(fields: [id], references: [id], onDelete: Cascade)
  languageCertifications GuideLanguageCertification[]
  reviews                GuideReview[]
}

model GuideReview {
  id                 Int       @id @default(autoincrement())
  communicationScore Int       @default(5)
  kindnessScore      Int       @default(5)
  locationScore      Int       @default(5)
  content            String?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt

  guideId    Int?
  guide      GuideProfile? @relation(fields: [guideId], references: [id], onDelete: Cascade)
  reviewerId Int?
  reviewer   Member?       @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
}

model Board {
  id        Int           @id @default(autoincrement())
  title     String?
  url       String?       @unique @default(uuid())
  overview  String?
  content   String?
  lat       Float?
  lng       Float?
  type      BoardType?    @default(TRIP)
  status    AccessStatus? @default(PUBLIC)
  process   BoardStatus?  @default(ACTIVE)
  createdAt DateTime?     @default(now())
  updatedAt DateTime?     @updatedAt
  deletedAt DateTime?

  tags     BoardTag[]
  likes    BoardLike[]
  comments Comment[]
  files    BoardFile[]

  authorId Int?
  author   Member? @relation(fields: [authorId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model BoardLike {
  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  createdAt DateTime? @default(now())

  @@id([boardId, memberId])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  members MemberTag[]
  boards  BoardTag[]
}

model MemberTag {
  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  tagId Int
  tag   Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([memberId, tagId])
}

model BoardTag {
  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  tagId Int
  tag   Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([boardId, tagId])
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique

  certifications LanguageCertification[]
  members        MemberLanguage[]
}

model MemberLanguage {
  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@id([memberId, languageId])
}

model LanguageCertification {
  id   Int    @id @default(autoincrement())
  name String @unique

  guideLanguageCertifications GuideLanguageCertification[]

  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
}

model GuideLanguageCertification {
  guideId Int
  guide   GuideProfile @relation(fields: [guideId], references: [id], onDelete: Cascade)

  languageCertificationId Int
  languageCertification   LanguageCertification @relation(fields: [languageCertificationId], references: [id], onDelete: Cascade)

  @@id([guideId, languageCertificationId])
}

model Plan {
  id        Int          @id @default(autoincrement())
  title     String
  status    AccessStatus @default(PUBLIC)
  region    String
  transport String
  period    Int
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  deletedAt DateTime?

  memberEvents MemberEvent[]
  daySchedules DaySchedule[]

  authorId Int
  author   Member @relation(fields: [authorId], references: [id])
}

model DaySchedule {
  id        Int        @id @default(autoincrement())
  day       Int
  schedules Schedule[]

  planId Int
  plan   Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Schedule {
  id            Int     @id @default(autoincrement())
  placeId       Int
  item          Place   @relation(fields: [placeId], references: [id])
  nextLat       Float?
  nextLng       Float?
  nextPlaceId   Int?
  nextPlaceName String?
  nextTime      String?
  stayTime      String?

  dayScheduleId Int
  daySchedule   DaySchedule @relation(fields: [dayScheduleId], references: [id], onDelete: Cascade)
}

model Place {
  id            Int     @id @default(autoincrement())
  placeId       String  @unique
  name          String
  address       String?
  description   String?
  photo         String?
  latitude      Float
  longitude     Float
  rating        Float
  category      String
  region        String
  url           String
  detailAddress String?
  phone         String?

  schedules    Schedule[]
  openingHours OpeningHours[]
  PlaceReview  PlaceReview[]
}

model OpeningHours {
  id        Int    @id @default(autoincrement())
  dayOfWeek Int
  openTime  String
  closeTime String

  placeId Int
  place   Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model MemberEvent {
  id          Int      @id @default(autoincrement())
  title       String
  start       DateTime
  end         DateTime
  allDay      Boolean? @default(false)
  description String?

  planId Int?
  plan   Plan? @relation(fields: [planId], references: [id], onDelete: Cascade)

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model PlaceReview {
  id        Int       @id @default(autoincrement())
  score     Int
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  placeId Int
  place   Place @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Chatroom {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime? @default(now())
  deletedAt DateTime?

  members  ChatroomParticipants[]
  messages ChatroomMessage[]
}

model ChatroomParticipants {
  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)

  memberId Int
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([chatroomId, memberId])
}

model ChatroomMessage {
  id        Int       @id @default(autoincrement())
  content   Json
  createdAt DateTime? @default(now())

  chatroomId String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])

  memberId Int
  sender   Member @relation(fields: [memberId], references: [id])
}

model Area {
  id   Int    @id @default(autoincrement())
  name String @unique

  guides GuideArea[]
}

model GuideArea {
  id Int @id @default(autoincrement())

  guideId Int
  guide   GuideProfile @relation(fields: [guideId], references: [id], onDelete: Cascade)

  areaId Int
  area   Area @relation(fields: [areaId], references: [id], onDelete: Cascade)
}

model File {
  id        String    @id @default(uuid())
  url       String    @unique
  name      String?
  createdAt DateTime? @default(now())

  boards BoardFile[]
}

model BoardFile {
  boardId Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  fileId String
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([boardId, fileId])
}

enum Provider {
  LOCAL
  GOOGLE
  LINE
}

enum Role {
  USER
  GUIDE
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum AccessStatus {
  PUBLIC
  GUIDES
  PRIVATE
  DELETED
}

enum BoardStatus {
  ACTIVE
  PROCESSING
  COMPLETE
}

enum BoardType {
  TRIP
  SOS
  NOTICE
}
